import java.awt.BorderLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;


/**
 * This is the JFrame that pulls everything together. 
 * It will contain a model of the board that will be used to analyze
 *  the game's state and outcome. It will also hold the logic to
 *  determine the winner of each game. 
 * This is where the main method will reside.
 * 
 * @author kyle
 *
 */
public class Game extends JFrame {

	/**
	 * Auto-generated by Eclipse
	 */
	private static final long serialVersionUID = 1L;
	
	private boolean isGameOver;
	private Board board;
	private JPanel scorePanel;
	/**
	 * This can have 1 of 3 values {
	 * <ul>
	 * 	<li>0: This is the PvP mode</li>
	 * 	<li>1: This is the EasyAI mode</li>
	 * 	<li>2: This is the HardAI mode</li>
	 * </ul>
	 * }
	 */
	private byte gameMode;
	
	
	public static void main(String[] args) {
		
		
		new Game().setVisible(true);
	}//end main
	
	public Game() {
		super("TicTacToe");
		setResizable(false);
		setSize(600,600);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		
		switch(gameMode){
			case 0:
				board = new PvPBoard(this);
				break;
			case 1:
				board = new EasyBoard(this);
				break;
			case 2:
				board = new HardBoard(this);
				break;
			default:
				board = new PvPBoard(this);
				break;
		}//end switch
		
		scorePanel = new JPanel();
    	this.isGameOver = false;
		add(board);

    	
    	
    	JLabel text = new JLabel("This is my text");
    	scorePanel.add(text);
    	add(scorePanel, BorderLayout.SOUTH);
	}//end constructor

	private boolean isGameOver()
    {
    	this.isGameOver = board.isGameOver();
    	return this.isGameOver;
    }//end gameover
	
	public void turn(byte player, byte row, byte col)
	{
		
	}

	

}

import java.awt.BorderLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 * This is the JFrame that pulls everything together. It will contain a model of
 * the board that will be used to analyze the game's state and outcome. It will
 * also hold the logic to determine the winner of each game. This is where the
 * main method will reside.
 *
 */
public class Game extends JFrame {

	/**
	 * Auto-generated by Eclipse
	 */
	private static final long serialVersionUID = 1L;

	private int[][] gameBoard;
	private Board board;
	private JPanel scorePanel;
	/**
	 * This can have 1 of 3 values {
	 * <ul>
	 * <li>0: This is the PvP mode</li>
	 * <li>1: This is the EasyAI mode</li>
	 * <li>2: This is the HardAI mode</li>
	 * </ul>
	 * }
	 */
	private int gameMode;

	public static void main(String[] args) {

		new Game().setVisible(true);
	}// end main

	public Game() {
		super("TicTacToe");
		setResizable(false);
		setSize(600, 600);
		setDefaultCloseOperation(EXIT_ON_CLOSE);

		switch (gameMode) {
		case 0:
			board = new PvPBoard(this);
			break;
		case 1:
			board = new EasyBoard(this);
			break;
		case 2:
			board = new HardBoard(this);
			break;
		default:
			board = new PvPBoard(this);
			break;
		}// end switch

		this.gameBoard = new int[3][3];
		this.scorePanel = new JPanel();
		add(board);

		JLabel text = new JLabel("This is my text");
		scorePanel.add(text);
		add(scorePanel, BorderLayout.SOUTH);
	}// end constructor

	private boolean gameOver(int player)
	{
		switch(player){
		case 0:
			System.out.println("It was a tie!");
			return true;
		case 1:
			System.out.println("Player X wins!");
			return true;
		case 2:
			System.out.println("Player O wins!");
			return true;
		default:
			System.out.println("Idk what happened");
			return true;
		}//end switch
	}
	
	private boolean streak(int one, int two, int three)
	{
		int check = (one*two*three);
		if (1 == check)
			return gameOver(1);
		else if (8 == check)
			return gameOver(2);
		else
			return false;
	}
	
	private boolean isBoardFilled()
	{
		for(int r = 0; r < 3; r++)
			for(int c = 0; c < 3; c++)
				if(gameBoard[r][c] == 0) return false;
		
		return gameOver(0);
	}//end isBoardFilled

	private boolean isGameOver() {
		// This loops checks each row/col for a streak
		for (int var = 0; var < 3; var++)
			if(streak(gameBoard[var][0], gameBoard[var][1], gameBoard[var][2]) ||
			   streak(gameBoard[0][var], gameBoard[1][var], gameBoard[2][var]) )
				return true;
		
		//diagonal streaks
		if(streak(gameBoard[0][0], gameBoard[1][1], gameBoard[2][2]))
			return true;
		else if(streak(gameBoard[0][2], gameBoard[1][1], gameBoard[2][0]))
			return true;

		return this.isBoardFilled();
	}// end gameover

	public boolean turn(int player, int row, int col) {
		gameBoard[row][col] = player;
		return isGameOver();
	}

}

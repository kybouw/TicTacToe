import java.awt.event.ActionEvent;
/**
 * This is the Hard game mode. The board will deliberately try to beat the player.
 *
 */
public class HardBoard extends Board {

	/**
	 * Auto-generated by Eclipse
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * Constructor for HardBoard
	 * @param game The Game that the board is contained in
	 */
	public HardBoard(Game game)
	{
		super(game);
	}
	/**
	 * Logic for what happens when the player selects a cell.
	 * Make sure the cell is empty, 
	 * makes move, 
	 * passes move to Game, 
	 * initiates AI's turn
	 */
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		XOButton obj = (XOButton)(e.getSource());
		int[] coords = this.getButtCoords(Integer.parseInt(e.getActionCommand()));
		
		if(!obj.isFilled()) {
			obj.setIconX();
			game.turn(1, coords[0], coords[1]);
		}
		if(!game.isGameOver()) takeAITurn();
	}

	/**
	 * Initiates the AI's turn
	 */
	private void takeAITurn()
	{
		tagWins();
	}
	/**
	 * Checks to see if the AI has any winning moves
	 * @return true when move is completed
	 */
	private boolean tagWins()
	{

		if(checkThrees(true)) return true;
		
		return blockWins();
	}
	/**
	 * Checks to see if AI can block any winning moves
	 * @return true when move is completed
	 */
	private boolean blockWins()
	{
		if(checkThrees(false)) return true;
		return blockOnes();
	}
	/**
	 * Tries to block the player from building 'two in a row'
	 * @return true when move is completed
	 */
	private boolean blockOnes()
	{
		
		return tagCorners();
	}
	/**
	 * Tries to claim a corner piece
	 * @return true when move is completed
	 */
	private boolean tagCorners()
	{
		return tagEmpty();
	}
	/**
	 * Picks a random empty spot
	 * @return true when move is completed
	 */
	private boolean tagEmpty()
	{
		return true;
	}

	/**
	 * Checks to see if there is an opportunity for either player to score.
	 * Makes and passes the move to Game
	 * @param winner true will search for AI opportunities to win, false will search for player's opportunity to win
	 * @return true if there is an opportunity for the specified player to score
	 */
	private boolean checkThrees(boolean winner)
	{
		int match, opp;
		if(winner){
			match = 2;
			opp = 1;
		}
		else{
			match = 1;
			opp = 2;
		}
		int check = 0;
		int targetr = -1;
		int targetc = -1;
		
		//checks rows
		for(int row = 0; row < 3 && targetr == -1; row++){
			for(int col = 0; col < 3 && check < 2; col++){
				if(game.gameBoard[row][col] == match) check++;
				else if(game.gameBoard[row][col] == opp) check = 3;
			}
			if(check == 2) targetr = row;
			else check = 0;
		}
		for(int i = 0; i < 3 && targetr > -1; i++)
			if(game.gameBoard[targetr][i] == 0)
				targetc = i;
		if(targetr > -1 && targetc > -1) {
			butts[(3*targetr)+(targetc)].setIconO();
			game.turn(2, targetr, targetc);
			return true;
		}
		
		//checks cols
		check = 0;
		targetr = -1;
		targetc = -1;
		for(int col = 0; col < 3 && targetc == -1; col++){
			for(int row = 0; row < 3 && check < 2; row++){
				if(game.gameBoard[row][col] == match) check++;
				else if(game.gameBoard[row][col] == opp) check = 3;
			}
			if(check == 2) targetc = col;
			else check = 0;
		}
		for(int i = 0; i < 3 && targetc > -1; i++)
			if(game.gameBoard[i][targetc] == 0)
				targetr = i;
		if(targetr > -1 && targetc > -1) {
			butts[(3*targetr)+(targetc)].setIconO();
			game.turn(2, targetr, targetc);
			return true;
		}
		
		//check diag1
		check = 0;
		int target = -1;
		for(int i = 0; i < 3 && check < 3; i++)
			if(game.gameBoard[i][i] == match) check++;
			else if(game.gameBoard[i][i] == opp) check = 3;
		for(int i = 0; i < 3 && check == 2; i++)
			if(game.gameBoard[i][i] == 0) target = i;
		if(target > -1) {
			butts[(3*target)+(target)].setIconO();
			game.turn(2, target, target);
			return true;
		}
		
		//check diag2
		check = 0;
		target = -1;
		for(int i = 0; i < 3 && check < 3; i++)
			if(game.gameBoard[i][2 - i] == match) check++;
			else if(game.gameBoard[i][2 - i] == opp) check = 3;
		for(int i = 0; i < 3 && check == 2; i++)
			if(game.gameBoard[i][2 - i] == 0) target = i;
		if(target > -1) {
			butts[(3*target)+(2-target)].setIconO();
			game.turn(2, target, 2 - target);
			return true;
		}
		
		return false;
	}
}

package components;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JComboBox;

import players.Computer;
import players.Easy;
import players.Hard;
import players.Human;
import players.Player;

/**
 * This is the JFrame that pulls everything together. It will contain a model of
 * the board that will be used to analyze the game's state and outcome. It will
 * also hold the logic to determine the winner of each game. This is where the
 * main method will reside.
 *
 */
public class Game extends JFrame {

	/**
	 * Auto-generated by Eclipse
	 */
	private static final long serialVersionUID = 1L;

	/**
	 * A 2D array used for Game's analysis of state and moves.
	 */
	int[][] gameBoard;
	/**
	 * The JPanel that contains the buttons
	 */
	private Board board;
	/**
	 * This is the panel underneath the board. It contains buttons and text.
	 */
	private JPanel scorePanel;
	/**
	 * This is the text that goes onto scorePanel
	 */
	private JLabel score;
	/**
	 * This JButton restarts the game
	 */
	private JButton restartGame;
	/**
	 * This can have 1 of 3 values:
	 * <ul>
	 * <li>0: This is the PvP mode</li>
	 * <li>1: This is the EasyAI mode</li>
	 * <li>2: This is the HardAI mode</li>
	 * </ul>
	 * 
	 */
	private int gameMode;
	
	private Player player1;
	private Player player2;

	/**
	 * Main method
	 * @param args usually empty
	 */
	public static void main(String[] args) {

		new Game().setVisible(true);
	}// end main

	/**
	 * Constructor
	 * Initializes the JFrame window, 
	 * allows for difficulty selection, 
	 * adds and formats all JComponents in the Game
	 */
	public Game() {
		super("TicTacToe");
		setResizable(false);
		setSize(600, 600);
		setDefaultCloseOperation(EXIT_ON_CLOSE);

		//TODO JOptionPane difficulty selector
		selectGameMode();
		add(board);

		this.gameBoard = new int[3][3];
		this.scorePanel = new JPanel();
		
		//Set up the players
		//TODO create a window for the players to select their icon
		
		this.scorePanel.setLayout(new GridBagLayout());
		GridBagConstraints c = new GridBagConstraints();
		score = new JLabel("Player X's turn...");
		restartGame = new JButton("Start Over");
		restartGame.addActionListener(new ActionListener() {
			/**
			 * Specifies what happens when a player decides to start the game over.
			 * Resets the board and the score panel.
			 */
			public void actionPerformed(ActionEvent e) 
			{
				board.startOver();
				gameBoard = new int[3][3];
				score.setText("Player X's turn...");
			}
		});
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		c.gridx = 0;
		c.gridy = 0;
		c.gridwidth = 2;
		scorePanel.add(score, c);
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 0;
		c.gridwidth = 1;
		c.gridx = 3;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_END;
		scorePanel.add(restartGame, c);
		c.fill = GridBagConstraints.HORIZONTAL;
		c.weightx = 1;
		c.gridwidth = 1;
		c.gridx = 2;
		c.gridy = 0;
		c.anchor = GridBagConstraints.LINE_END;
		add(scorePanel, BorderLayout.SOUTH);
	}// end constructor

	/**
	 * This evaluates whether or not three specified values are owned by the same player.
	 * @param one the first value
	 * @param two the second value
	 * @param three the third value
	 * @return true if it is 3 in a row, and passes the winner to gameOver
	 */
	private boolean streak(int one, int two, int three)
	{
		int check = (one*two*three);
		if (1 == check)
			return gameOver(1);
		else if (8 == check)
			return gameOver(2);
		else
			return false;
	}

	/**
	 * 
	 */
	private void selectGameMode()
	{
		
		JFrame gameConfig = new JFrame("Game Settings");
		gameConfig.setResizable(false);
		gameConfig.setSize(400, 200);
		gameConfig.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		
		String[] player = new String[2];
		String[] icon = new String[2];
		
		//Select what type of player Player1 is
		JPanel p1Config = new JPanel();
		ButtonGroup b1 = new ButtonGroup();
		JRadioButton b11 = new JRadioButton("Human");
		b1.add(b11);
		b11.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				player[0] = "Human";
			}
		});		
		JRadioButton b12 = new JRadioButton("Easy");
		b1.add(b12);
		b12.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				player[0] = "Easy";
			}
		});		
		JRadioButton b13 = new JRadioButton("Hard");
		b1.add(b13);
		b13.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				player[0] = "Hard";
			}
		});	
		
		p1Config.add(new JLabel("Player 1 mode..."));
		p1Config.add(b11);
		p1Config.add(b12);
		p1Config.add(b13);
		
		//Select what type of player Player2 is
		JPanel p2Config = new JPanel();
		ButtonGroup b2 = new ButtonGroup();
		JRadioButton b21 = new JRadioButton("Human");
		b2.add(b21);
		b21.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				player[1] = "Human";
			}
		});
		JRadioButton b22 = new JRadioButton("Easy");
		b2.add(b22);
		b22.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				player[1] = "Easy";
			}
		});
		JRadioButton b23 = new JRadioButton("Hard");
		b2.add(b23);
		b23.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				player[1] = "Hard";
			}
		});
		
		p2Config.add(new JLabel("Player 2 mode..."));
		p2Config.add(b21);
		p2Config.add(b22);
		p2Config.add(b23);
		
		//select who is X
		JPanel selectX = new JPanel();
		ButtonGroup b3 = new ButtonGroup();
		JRadioButton b31 = new JRadioButton("Player 1");
		b3.add(b31);
		b31.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				icon[0] = "X";
				icon[1] = "O";
			}
		});
		JRadioButton b32 = new JRadioButton("Player 2");
		b3.add(b32);
		b32.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				icon[0] = "O";
				icon[1] = "X";
			}
		});
		selectX.add(new JLabel("Who will be X?"));
		selectX.add(b31);
		selectX.add(b32);
		
		//Submit button
		JButton submit = new JButton("Submit");
		submit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				//TODO move on
				setConfig(player, icon);
				gameConfig.dispose();
			}
		});
		
		JPanel gameConfigP = new JPanel();

		gameConfigP.add(p1Config);
		gameConfigP.add(p2Config);
		gameConfigP.add(selectX);
		gameConfigP.add(submit);
		
		gameConfig.add(gameConfigP);
		
		gameConfig.setVisible(true);
		
		
		
	}
	
	public void setConfig(String[] player, String[] icon) {
		if(player[0].equals("Human")) 
			this.player1 = new Human(board, (icon[0].equals("X"))); 
		else if(player[0].equals("Easy"))
			this.player1 = new Easy(board, (icon[0].equals("X")));
		else if(player[0].equals("Hard"))
			this.player1 = new Hard(board, (icon[0].equals("X")));
		if(player[1].equals("Human")) 
			this.player2 = new Human(board, (icon[1].equals("X"))); 
		else if(player[1].equals("Easy"))
			this.player2 = new Easy(board, (icon[1].equals("X")));
		else if(player[1].equals("Hard"))
			this.player2 = new Hard(board, (icon[1].equals("X")));
	}
	/**
	 * Ends the game in reference to Game, calls the board's endGame method
	 * Changes the text in the score panel to reflect game results
	 * @param player 0 for tie, 1 for X, and 2 for O
	 * @return true
	 */
	private boolean gameOver(int player)
	{
		board.endGame();
		switch(player){
		case 0:
			this.score.setText("It's a tie!");
			return true;
		case 1:
			this.score.setText("Player X wins!");
			return true;
		case 2:
			this.score.setText("Player O wins!");
			return true;
		default:
			System.out.println("Idk what happened");
			this.score.setText("Error...");
			return true;
		}//end switch
	}
	
	/**
	 * Changes the text from "player X's turn" to "Player O's turn" and vice versa
	 */
	private void changeScoreText()
	{
		if(this.score.getText().contains("X"))
			this.score.setText("Player O's turn...");
		else if(this.score.getText().contains("O"))
			this.score.setText("Player X's turn...");
	}
	
	/**
	 * Determines whether or not the board is entirely filled
	 * @return true if there are no more empty spots
	 */
	boolean isBoardFilled()
	{
		for(int r = 0; r < 3; r++)
			for(int c = 0; c < 3; c++)
				if(gameBoard[r][c] == 0) return false;
		
		return gameOver(0);
	}//end isBoardFilled

	/**
	 * Checks to see if the game is over
	 * @return true if there is either a winner or the board is full
	 */
	boolean isGameOver() {
		// This loops checks each row/col for a streak
		for (int var = 0; var < 3; var++)
			if(streak(gameBoard[var][0], gameBoard[var][1], gameBoard[var][2]) ||
			   streak(gameBoard[0][var], gameBoard[1][var], gameBoard[2][var]) )
				return true;
		//diagonal streaks
		if(streak(gameBoard[0][0], gameBoard[1][1], gameBoard[2][2]))
			return true;
		else if(streak(gameBoard[0][2], gameBoard[1][1], gameBoard[2][0]))
			return true;
		return this.isBoardFilled();
	}// end gameover

	/**
	 * This triggers the actions that take place whenever a player takes their turn
	 * @param player The number of the player who's turn it is (1:X, 2:O)
	 * @param row The row of the button that was pressed
	 * @param col The col of the button that was pressed
	 */
	void turn(int player, int row, int col) {
		gameBoard[row][col] = player;
		if(!isGameOver())
			changeScoreText();
	}//end turn

}

import javax.swing.JPanel;
import java.awt.GridLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
/**
 * This is the board that is used for play.
 * This class will hold the buttons and basically 
 *  hold everything that the player has to interact with. 
 * It will hold the logic for making moves.
 * 
 */
public abstract class Board extends JPanel implements ActionListener
{
	/**
	 * Auto generated by Eclipse
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * A reference to the Game object that the Board is contained in
	 */
	protected Game game;
	/**
	 * An array of XOButtons that will be added to the board
	 */
	protected XOButton[] butts = new XOButton[9];
	/**
	 * Tracks whose turn it is
	 */
	protected int turn;
	
	
	/**
	 * Constructor for the board
	 * @param game The game object that the board is contained in
	 */
    public Board(Game game)
    {
    	this.game = game;
		setLayout(new GridLayout(3,3));
		for(int i = 0; i < butts.length; i++){
    		butts[i] = new XOButton();
    		butts[i].setActionCommand("" + i);
    		add(butts[i]);
    	}
		startGame();
    }//constructor
    /**
     * Gets the coordinates of the button that is pressed in terms of row and col
     * @param i the index of the XOButton in the array butts
     * @return [0] is the row, [1] is the column that the button is located in
     */
    protected int[] getButtCoords(int i)
    {
    	int[] coords = {i/3, i%3};
    	return coords;
    }
    /**
     * This resets the board by getting rid of the icons on the buttons, 
     * then calling the start function
     */
    protected void startOver()
    {
    	for(int i = 0; i < butts.length; i++)
    		butts[i].setIconClear();
    	startGame();
    }
    /**
     * Adds action listeners to the buttons and resets the turn counter
     */
    private void startGame()
    {
    	for(int i = 0; i < butts.length; i++)
    		butts[i].addActionListener(this);
    	this.turn = 0;
    }
    /**
     * Removes the action listeners for all the buttons
     */
    protected void endGame()
    {
    	for(int i = 0; i < butts.length; i++)
    		butts[i].removeActionListener(this);
    }

    /**
     * Triggers what happens when the player clicks a spot on the board
     */
    public abstract void actionPerformed(ActionEvent e);
    
}//class
